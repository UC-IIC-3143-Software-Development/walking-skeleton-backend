name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npm run lint
      continue-on-error: true

    - name: Check code formatting
      run: npm run format:check

    - name: Run build
      run: npm run build

    - name: Run tests
      run: npm test

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info

  create-tag:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Get package version
      id: package-version
      run: |
        VERSION=$(node -p "require('./package.json').version")
        echo "version=v$VERSION" >> $GITHUB_OUTPUT

    - name: Check if tag exists
      id: check-tag
      run: |
        if git rev-parse "${{ steps.package-version.outputs.version }}" >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Create and push tag
      if: steps.check-tag.outputs.exists == 'false'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a ${{ steps.package-version.outputs.version }} -m "Release ${{ steps.package-version.outputs.version }}"
        git push origin ${{ steps.package-version.outputs.version }}

    - name: Create GitHub Release
      if: steps.check-tag.outputs.exists == 'false'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.package-version.outputs.version }}
        release_name: Release ${{ steps.package-version.outputs.version }}
        draft: false
        prerelease: false
